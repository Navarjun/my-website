var Datastore = require("nedb"),
  db = {};
  db.blog = new Datastore({ filename: "data/blog-data", autoload: true });
  /*
    { _id: auto-generated by db
      title: title of the blog
      summary: summary of the blog
      blogFile: an S3 link to md file that represents this blog(that way I can write in Ullyses)
      publishDate: publish date
      tags: comma seperated tags
      urlId: url-encoded title
    }
  */


  db.portfolio = new Datastore({ filename: "data/portfolio-data", autoload: true});
  /*
    { _id: auto-generated by db
      title: title of the project
      startDate: startDate of the project
      endDate: endDate of the project
      publishDate: date I published this blog
      imageFile: imageFile to be displayed on the front-page
      blogFile: an S3 link to md file that represents the process of this project
      tags: comma-seperated tags
      urlId: url-encoded title
    }
  */


var mod = {};
mod.addPost = function(title, summary, blogFile, publishDate, tags, callback) {
  if (title && summary && blogFile && tags) {
    var blogDetails = {
      title: title,
      summary: summary,
      blogFile: blogFile,
      publishDate: publishDate,
      tags: tags,
      urlId: encodeURIComponent(title.toLowerCase().replace(" ", "-")),
    };
    db.blog.insert(blogDetails, function (err, newDoc) {
      // console.log(newDoc);
    });
  } else {
    // callback
  }
}

mod.addProject = function(title, startDate, endDate, publishDate, imageFile, blogFile, tags, callback) {
  if (title && startDate && endDate && publishDate && imageFile && blogFile && tags) {
    var blogDetails = {
      title: title,
      startDate: startDate,
      endDate: endDate,
      publishDate: publishDate,
      imageFile: imageFile,
      blogFile: blogFile,
      tags: tags,
      urlId: encodeURIComponent(title.toLowerCase().replace(" ", "-"))
    };
    db.portfolio.insert(blogDetails, function (err, newDoc) {
      // console.log(newDoc);
    });
  } else {
    // callback
  }
}

mod.hasMorePages = function(page, callback) {

}

mod.getPosts = function(page, callback) {
  db.blog.find({}).sort({ publishDate: 1 }).skip(page*10).limit(10).exec(function (err, docs) {
    if (err) {
      callback({ errorName: dbError, errorDescription: "DB Error in getPosts"});
    } else {
      callback(undefined, docs);
    }
  });
}

mod.getProjects = function(page, callback) {
  db.portfolio.find({}).sort({ publishDate: 1 }).skip(page*20).limit(20).exec(function (err, docs) {
    if (err) {
      callback({ errorName: dbError, errorDescription: "DB Error in getProjects"});
    } else {
      callback(undefined, docs);
    }
  });
}

mod.findPost = function(urlId, callback) {
  db.blog.findOne({urlId: urlId}).exec(function(err, doc){
    if (err) {
      callback({ errorName: dbError, errorDescription: "DB Error in findPost"});
    } else {
      callback(undefined, doc);
    }
  })
}

mod.findProject = function(urlId, callback) {
  db.portfolio.findOne({urlId: urlId}).exec(function(err, doc){
    if (err) {
      callback({ errorName: dbError, errorDescription: "DB Error in findProject"});
    } else {
      callback(undefined, doc);
    }
  })
}

module.exports = mod;
